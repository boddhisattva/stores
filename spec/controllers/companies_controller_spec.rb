require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe CompaniesController do
  before do
    @company_hash = {:name => "abc", :contact_no => 222, :email_id => "cust@abc.com" , :fax_no => 2222, :website => "www.abc.com" }
  end

  # This should return the minimal set of attributes required to create a valid
  # Company. As you add validations to Company, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {}
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # CompaniesController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET index" do
    it "assigns all companies as @companies" do
      company = Company.create! valid_attributes
      get :index, {}, valid_session
      assigns(:companies).should eq([company])
    end
  end

  describe "GET show" do
    before do
      @comp_obj = Company.create(@company_hash)
    end

    it "should return one of the existing announcements created as part of the before block" do
      get :show, :id => @comp_obj.id
      response.should be_success
      response.status.should == 200
      #response.should be_redirect
    end

    it "should return one of the existing announcements created as part of the before block" do
      get :show, :id => @comp_obj.id, :format => :json
      response_body = JSON.parse(response.body)
      puts "\n*****#{response_body}******\n"
      #response_body.keys.should =~ %w(contact_no)
      response_body["contact_no"].should == 222
      response.should be_success
      response.status.should == 200
      #response.should be_redirect
    end

    it "assigns the requested company as @company" do
      company = Company.create! valid_attributes
      get :show, {:id => company.to_param}, valid_session
      assigns(:company).should eq(company)
    end

  end

  describe "GET new" do
    it "assigns a new company as @company" do
      get :new, {}, valid_session
      assigns(:company).should be_a_new(Company)
    end
  end

  describe "GET new" do
    it "assigns a new company as @company" do
      get :new, {}, valid_session
      assigns(:company).should be_a_new(Company)
    end
  end


  describe "GET edit" do
    it "assigns the requested company as @company" do
      company = Company.create! valid_attributes
      get :edit, {:id => company.to_param}, valid_session
      assigns(:company).should eq(company)
    end
  end

  describe "POST create" do
    before do
      @company_hash = {:name => "abc", :contact_no => 222, :email_id => "cust@abc.com" , :fax_no => 2222, :website => "www.abc.com" }
    end
    describe "with valid params" do
      it "creates a new Company" do
        expect {
          post :create, {:company => valid_attributes}, valid_session
        }.to change(Company, :count).by(1)
      end

      it "actually creates a new company" do
        co = Company.create(@company_hash)
        response.should be_success
        response.status.should == 200
        co.name.should == Company.last.name
        Company.count.should == 1 # creating only one record
      end

      it "actually creates a new company as an HTTP POST request" do
        post :create, :company => @company_hash #:params => {:company => @company_hash}
        flash[:notice].should == "Company was successfully created." #taken from the controller..
        flash[:notice].should_not == "test"
        Company.last.name.should == "abc"
      end

      it "assigns a newly created company as @company" do
        post :create, {:company => valid_attributes}, valid_session
        assigns(:company).should be_a(Company)
        assigns(:company).should be_persisted
      end

      it "redirects to the created company" do
        post :create, {:company => valid_attributes}, valid_session
        response.should redirect_to(Company.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved company as @company" do
        # Trigger the behavior that occurs when invalid params are submitted
        Company.any_instance.stub(:save).and_return(false)
        post :create, {:company => {}}, valid_session
        assigns(:company).should be_a_new(Company)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Company.any_instance.stub(:save).and_return(false)
        post :create, {:company => {}}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      before do
        @comp_obj = Company.create(@company_hash)
      end
      it "updates the requested company" do
        company = Company.create! valid_attributes
        # Assuming there are no other companies in the database, this
        # specifies that the Company created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Company.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:id => company.to_param, :company => {'these' => 'params'}}, valid_session
      end

      it "updates @comp_obj" do
        @updated_comp_obj = {:email_id => "cust_care@samsung.com"}
        put :update, {:id => @comp_obj.id, :company => @updated_comp_obj}
        #@comp_obj.update_attributes(:email => "cust_care@abc.com")
        flash[:notice].should == "Company was successfully updated."
        Company.last.email_id.should == "cust_care@samsung.com"
        Company.find_by_email_id("cust_care@samsung.com").id.should == @comp_obj.id
        Company.find_by_email_id("cust_care@samsung.com").id.should_not == nil
      end


      it "assigns the requested company as @company" do
        company = Company.create! valid_attributes
        put :update, {:id => company.to_param, :company => valid_attributes}, valid_session
        assigns(:company).should eq(company)
      end

      it "redirects to the company" do
        company = Company.create! valid_attributes
        put :update, {:id => company.to_param, :company => valid_attributes}, valid_session
        response.should redirect_to(company)
      end
    end

    describe "with invalid params" do
      it "assigns the company as @company" do
        company = Company.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Company.any_instance.stub(:save).and_return(false)
        put :update, {:id => company.to_param, :company => {}}, valid_session
        assigns(:company).should eq(company)
      end

      it "re-renders the 'edit' template" do
        company = Company.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Company.any_instance.stub(:save).and_return(false)
        put :update, {:id => company.to_param, :company => {}}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    before do
      @comp_obj = Company.create(@company_hash)
    end
    it "destroys the requested company" do
      company = Company.create! valid_attributes
      expect {
        delete :destroy, {:id => company.to_param}, valid_session
      }.to change(Company, :count).by(-1)
    end

    it "redirects to the companies list" do
      company = Company.create! valid_attributes
      delete :destroy, {:id => company.to_param}, valid_session
      response.should redirect_to(companies_url)
    end

    it "deletes a company record" do
      before_obj_count = Company.count
      delete :destroy, :id => @comp_obj.id
      after_obj_count = Company.count
      before_obj_count.should_not == after_obj_count
      Company.find_by_id(@comp_obj.id).should == nil
    end
  end

end
